trigger:
  branches:
    include:
      - master
  tags:
    include:
      - "*"
pr:
  - master

variables:
  - group: Docs Authoring Pack KV
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm
  - name: runCodesignValidationInjection
    value: false
  - name: LGTM.SnapshotIdentifiers
    value: Build=Full
  - name: LGTM.SnapshotMetadata
    value: Owner=VSCODE-DOCS-VALIDATION
  - name: LGTM.UploadSnapshot
    value: true
  - name: Semmle.SkipAnalysis
    value: true
  - name: isBranchBuild
    value: $[ne(variables['Build.Reason'], 'PullRequest')]

strategy:
  matrix:
    mac:
      imageName: "macOS-latest"
    windows:
      imageName: "windows-latest"

pool:
  vmImage: $(imageName)

steps:
  - task: NodeTool@0
    displayName: "Use Node 10.x"
    inputs:
      versionSpec: 10.x

  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
        npm
      path: $(npm_config_cache)
    displayName: Cache npm

  - task: Npm@1
    displayName: "npm ci"
    inputs:
      verbose: false

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-semmle.Semmle@0
    displayName: 'Run Semmle (tsandjs)'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      toolVersion: LatestPreRelease
      language: tsandjs
      includeNodeModules: false
      querySuite: Required

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'Run CredScan'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
    inputs:
      toolMajorVersion: V2
      suppressionsFile: suppression-files.json
      debugMode: false

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
    displayName: 'Create Security Analysis Report'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
    inputs:
      CredScan: true
      Semmle: $(isBranchBuild)

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
    inputs:
      CredScan: true
      Semmle: $(isBranchBuild)

  - bash: |
      npm run test
    displayName: Run Test(Mac)
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
    env:
      GITHUB_TOKEN: $(githubToken)
      VSCODE_DOCS_BUILD_EXTENSION_BUILD_USER_TOKEN: $(opBuildUserToken)

  - powershell: |
      npm run test
    displayName: Run Test(Windows)
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
    env:
      GITHUB_TOKEN: $(githubToken)
      VSCODE_DOCS_BUILD_EXTENSION_BUILD_USER_TOKEN: $(opBuildUserToken)

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: output"
    inputs:
      PathtoPublish: ".temp/debug"
      ArtifactName: Output-Mac
    condition: and(failed(), eq(variables['Agent.OS'], 'Darwin'))

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: output"
    inputs:
      PathtoPublish: ".temp/debug"
      ArtifactName: Output-Windows
    condition: and(failed(), eq(variables['Agent.OS'], 'Windows_NT'))

  - bash: ./node_modules/.bin/codecov -f coverage/unit/lcov.info -F unit
    displayName: "Report unit test coverage"
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)

  - bash: |
      npm run publish -- -p $(Docs-Authoring-Pack-Publish-Token)
    displayName: "Publish"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['Agent.OS'], 'Windows_NT'))
